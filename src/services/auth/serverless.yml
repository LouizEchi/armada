service:
  name: auth

plugins:
  - serverless-plugin-typescript
  - serverless-pseudo-parameters

provider:
  name: aws
  environment:
    APP_SECRET: ${ssm:APP_SECRET_${self:custom.stage}}
    CLIENT_ID: ${ssm:client_id_${self:custom.stage}}
    CLIENT_SECRET: ${ssm:client_secret_${self:custom.stage}}
    NODE_ENV: ${self:custom.stage}
    NOTIFICATIONS_URI: ${ssm:notifications_uri}
    DATABASE_NAME: ${ssm:dbname_${self:custom.stage}}
    DATABASE_PASSWORD: ${ssm:dbpass_${self:custom.stage}}
    DATABASE_PORT: ${ssm:dbport_${self:custom.stage}}
    DATABASE_HOST: ${ssm:dbhost_${self:custom.stage}}
    DATABASE_USER: ${ssm:dbuser_${self:custom.stage}}
  runtime: nodejs10.x
  region: ap-southeast-1
  stackName: ${self:custom.project}-${self:custom.service_name}-${self:custom.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ssm:GetParameters"
      Resource: "arn:aws:ssm:ap-southeast-1:#{AWS::AccountId}:parameter/*"
  apiGateway:
    restApiId:
      "Fn::ImportValue": ${self:custom.project}-${self:custom.stage}-api-id
    restApiRootResourceId:
      "Fn::ImportValue": ${self:custom.project}-${self:custom.stage}-api-root-id

custom:
  project: kaishahero
  service_name: auth
  stage: ${opt:stage, self:provider.stage}

functions:
  index:
    handler: handler.index
    events:
      - http:
          method: get
          cors: true
          path: auth
  create:
    handler: handler.create
    events:
      - http:
          method: post
          cors: true
          path: auth/sign-up
  login:
    handler: handler.login
    events:
      - http:
          method: post
          cors: true
          path: auth/login
