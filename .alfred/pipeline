  
properties(
  [
    buildDiscarder(
      logRotator(
        numToKeepStr: '1'
      )
    )
  ]
)

node {
  stage ('Checkout') {
    bitbucketStatusNotify(buildState: 'INPROGESS', buildName: 'Checkout')
    checkout scm

    GIT_REPO_NAME = sh (
      script: "basename `git config --get remote.origin.url` | sed 's/.git//'",
      returnStdout: true
    ).trim()
    COMMIT_ID = sh (
      script: "git rev-parse HEAD",
      returnStdout: true
    ).trim()
    COMMIT_SHORT = sh (
      script: "git rev-parse --short HEAD",
      returnStdout: true
    ).trim()
    ECR_URI = sh (
      script: "aws ecr describe-repositories --query repositories[0].repositoryUri --repository '$GIT_REPO_NAME' | tr -d '\"'",
      returnStdout: true
    ).trim()


    withCredentials([file(credentialsId: 'AIRSIDE_PEM', variable: 'AIRSIDE_PEM')]) {
      sh "cat ${AIRSIDE_PEM} > .alfred/access-key"
    }

    sh """
      echo $GIT_REPO_NAME > .alfred/git-repo-name.txt
      echo $COMMIT_ID > .alfred/git-commit-id.txt
      echo $COMMIT_SHORT > .alfred/git-commit-short.txt
      echo $ECR_URI > .alfred/ecr-uri.txt
      echo '<'$BUILD_URL'|Build #'$BUILD_NUMBER'>' > .alfred/build-link.txt
      aws ssm get-parameter --name slack-service-uri --query Parameter.Value | xargs -I % sh -c 'echo https://hooks.slack.com/services/% > .alfred/slack-url.txt'
    """
  
    try {
      sh '$(sh .alfred/checkout.sh)'
    } catch (e) {
      bitbucketStatusNotify(buildState: 'FAILED', buildName: 'Checkout')
    }
  }
  stage ('Testing') {
    bitbucketStatusNotify(buildState: 'INPROGESS', buildName: 'Running tests')
    try {
      sh (
        script: 'sh .alfred/testing.sh',
        returnStdout: false
      )
    } catch (e) {
      bitbucketStatusNotify(buildState: 'FAILED', buildName: 'Running tests')
    }
  }
  stage ('Push image') {
    bitbucketStatusNotify(buildState: 'INPROGESS', buildName: 'Pushing image')
    try {
      sh (
        script: 'sh .alfred/ecr-push.sh',
        returnStdout: false
      )
    } catch (e) {
      bitbucketStatusNotify(buildState: 'FAILED', buildName: 'Pushing image')
    }
  }
  stage ('Update services') {
    bitbucketStatusNotify(buildState: 'INPROGESS', buildName: 'Update services')
    try {
      sh (
        script: 'sh .alfred/update-services.sh',
        returnStdout: true
      )
    } catch (e) {
      bitbucketStatusNotify(buildState: 'FAILED', buildName: 'Update services')
    }
  }
  stage ('Restart containers') {
    bitbucketStatusNotify(buildState: 'INPROGESS', buildName: 'Restart containers')
    try {
      sh (
        script: 'sh .alfred/restart.sh',
        returnStdout: true
      )
    } catch (e) {
      bitbucketStatusNotify(buildState: 'FAILED', buildName: 'Restart containers')
    }
  }
}
